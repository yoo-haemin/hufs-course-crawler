package course_fetcher

import scalaj.http._

object CourseFetcher extends App {
  val baseRequest: HttpRequest =
  Http("http://webs.hufs.ac.kr:8989/src08/jsp/lecture/LECTURE2020L.jsp")
    .postForm
    .params(Map(
      "tab_lang" -> "K",
      "type" -> "",
      "ag_ledg_year" -> "2017",
      "ag_ledg_sessn" -> "1",
      "ag_org_sect" -> "A",
      "campus_sect" -> "H1",
      "gubun" -> "2", //"1",
      "ag_crs_strct_cd" -> "AAR01_H1", //
      "ag_compt_fld_cd" -> "302_H1" //
    ))

  //gubun 1
  //"ag_crs_strct_cd"

  //gubun = 2
  //"ag_compt_fld_cd" -> "302_H1"
  val liberalArtsCourses = Map("301_H1" -> "인문강좌(서울)", "302_H1" -> "교양외국어(서울)", "303_H1" -> "신입생세미나(서울)", "304_H1" -> "HUFS CAREER(서울)", "320_H1" -> "학습포트폴리오(서울)", "327_H1" -> "건강과레포츠(서울)", "328_H1" -> "특별교양(서울)", "32A_H1" -> "실용외국어(선택)(서울)", "32V_H1" -> "외국인을 위한 한국학(서울)", "32Z_H1" -> "공동교양(한예종)(서울)", "330_H1" -> "언어와문학(서울)", "331_H1" -> "문화와예술(서울)", "332_H1" -> "역사와철학(서울)", "333_H1" -> "국가와사회(서울)", "334_H1" -> "과학과기술(서울)", "335_H1" -> "핵심인문기초(서울)", "61_H1" -> "군사학(서울)")

  val body = baseRequest.asString.body

  val courseRegex = """<td>(.*)<\/td>\s*<td>(\d)<\/td>\s*<td>([A-Z]\d{5}[A-Z0-9]\d{2})<\/td>\s*<td align="left">\s*<!--.*-->\s*<div\s*.*\s*.\s*<font class="txt_navy">(.*)<\/font><br>\s*(?:<font class=['"]txt_gray8['"]>\((.*)\)<\/font>\s*)?<\/div>\s*<\/td>\s*<td>\s*.*\s*.*\s*<\/td>\s*(?:<td>.*<\/td>\s*){4}<td align="left">(.*)\s*(?:<br>\s*<font class="txt_gray8">\((.*)\)<\/font>)?\s*<\/td>\s*<td>(\d)<\/td>\s*<td>(\d)<\/td>\s*<td align="left">.*<br><font class="txt_gray8">\((?:([A-Z][a-z]{2}) (\d{1,2}) (\d{1,2})? ?(\d{1,2})? ?(?:\(((?:[C0-9]\d{3,4}(?:-1)?)|(?:B[12]-\d{2})|(?:사이버관 대강당))\)? ?)?)(?:([A-Z][a-z]{2}) (\d{1,2}) (\d{1,2})? ?(\d{1,2})? ?(?:\(((?:[C0-9]\d{3,4}(?:-1)?)|(?:B[12]-\d{2})|(?:사이버관 대강당))\)? ?)?)?(?:([A-Z][a-z]{2}) (\d{1,2}) (\d{1,2})? ?(\d{1,2})? ?(?:\(((?:[C0-9]\d{3,4}(?:-1)?)|(?:B[12]-\d{2})|(?:사이버관 대강당))\)? ?)?)?\)<\/font><\/td>\s*<td>(\d{1,})&nbsp;\/&nbsp;(\d{1,})<\/td>\s*<td align="left">(.*)<br>""".r

  val embeddedCourses = courseRegex.unanchored

  val matchGroupNames = Vector(
    "courseType", "courseYear", "courseNo", "courseNameMain", "courseNameAdditional", "professorNameMain", "professorNameAdditional", "creditHours", "courseHours",
    "dayOfWeek1", "time11", "time12", "time13", "classroom1", "dayOfWeek2", "time21", "time22", "time23", "classroom2", "dayOfWeek3", "time31", "time32", "time33", "classroom3", "currentlyEnrolled", "maximumEnrolled", "note"
  )
  val courseInfo = for (m <- courseRegex findAllMatchIn body) yield (matchGroupNames zip m.subgroups.map(x => Option(x))).toMap

  println(courseInfo.toVector)
}

//request parameters:
/*
"ag_ledg_year""
("2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999")

"ag_ledg_sessn"
("1" -> 1st Semester,
"2" -> Summer Session,
"3" -> 2nd Semester,
"4" -> Winter Session)

"ag_org_sect"
("A" -> "학부 (Undergraduate)",
"B" -> "대학원 (Graduate School)",
"D" -> "통번역대학원 (Graduate School of Interpretation and Translation)",
"E" -> "교육대학원 (Graduate School of Education)",
"G" -> "정치행정언론대학원 (Graduate School of Politics, Government, and Communication)",
"H" -> "국제지역대학원 (Graduate School of International and Area Studies)",
"I" -> "경영대학원(주간) (Graduate School of Business)",
"J" -> "경영대학원(야간) (Graduate School of Business)",
"L" -> "법학전문대학원 (Law School)",
n"M" -> "TESOL대학원 (Graduate School of TESOL)",
"T" -> "TESOL 전문교육원 (TESOL Professional Education Center)")

"campus_sect"
("H1", "H2") //서울 글로벌
 */
